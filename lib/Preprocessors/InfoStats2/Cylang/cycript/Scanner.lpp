/* Cycript - The Truly Universal Scripting Language
 * Copyright (C) 2009-2016  Jay Freeman (saurik)
*/

/* GNU Affero General Public License, Version 3 {{{ */
/*
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.

 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
**/
/* }}} */

%top{
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-register"
#pragma clang diagnostic ignored "-Wunused-function"
#pragma clang diagnostic ignored "-Wunused-variable"
#pragma clang diagnostic ignored "-Wshorten-64-to-32"
#pragma clang diagnostic ignored "-Winconsistent-missing-override"
#pragma clang diagnostic ignored "-Wbitwise-op-parentheses"
}

%{

#define YYLTYPE CYLocation
#include "Parser.tab.hpp"
typedef cy::parser::token tk;

#include "Highlight.hpp"

#include "IdentifierStart.h"
#include "IdentifierContinue.h"

#define YY_EXTRA_TYPE CYDriver *

#define F(value, highlight) do { \
    BEGIN(yyextra->template_.top() ? DivOrTemplateTail : Div); \
    yylval->highlight_ = highlight; \
    return value; \
} while (false)

#define S(stack) do { \
    if (yyextra->stack.size() == 1) \
        E("invalid brace") \
    yyextra->stack.pop(); \
} while (false)

#define P yyextra->pool_
#define A new(P)
#define Y P.strmemdup(yytext, yyleng)

#define I(type, Type, value, highlight) do { \
    yylval->semantic_.type ## _ = A CY ## Type; \
    yylval->semantic_.type ## _->location_ = *yylloc; \
    F(value, highlight); \
} while (false)

#define N \
    if (yyextra->last_) { \
        yyextra->last_ = false; \
        F(tk::NewLine, hi::Nothing); \
    }

#define V(more) { \
    if (const char *nl = reinterpret_cast<const char *>(memchr(yytext, '\n', yyleng))) { \
        unsigned lines(0); \
        size_t left; \
        do { \
            ++lines; \
            left = yyleng - (nl - yytext) - 1; \
            nl = reinterpret_cast<const char *>(memchr(nl + 1, '\n', left)); \
        } while (nl != NULL); \
        yylloc->step(); \
        yylloc->end.Lines(lines); \
        yylloc->end.Columns(left); \
        more \
    } else L \
}

#define R yylloc->end.Columns(yyleng);
#define L yylloc->step(); R

#define H(value, highlight) do { \
    if (yyextra->highlight_) \
        F(value, highlight); \
} while (false)

#define M \
    H(tk::Comment, hi::Comment);

#define E(message) { \
    CYDriver::Error error; \
    error.location_ = *yylloc; \
    error.message_ = "syntax error, " message; \
    yyextra->errors_.push_back(error); \
    yyterminate(); \
}

int X(char c) {
    if (c >= '0' && c <= '9')
        return c - '0';
    if (c >= 'a' && c <= 'f')
        return c - 'a' + 10;
    if (c >= 'A' && c <= 'F')
        return c - 'A' + 10;
    return -1;
}

template <typename Type_>
static void U(Type_ &local, unsigned point) {
    if (false) {
    } else if (point < 0x000080) {
        *local++ = point;
    } else if (point < 0x000800) {
        *local++ = 0xc0 | point >> 0x06 & 0x1f;
        goto one;
    } else if (point < 0x010000) {
        *local++ = 0xe0 | point >> 0x0c & 0x0f;
        goto two;
    } else if (point < 0x110000) {
        *local++ = 0xf0 | point >> 0x12 & 0x07;
        *local++ = 0x80 | point >> 0x0c & 0x3f;
      two:
        *local++ = 0x80 | point >> 0x06 & 0x3f;
      one:
        *local++ = 0x80 | point >> 0x00 & 0x3f;
    } else _assert(false);
}

static unsigned U(char *&local, const char *text, yy_size_t &i) {
    unsigned point;

    char next(text[++i]);
    if (next != '{') {
        point = X(text[i + 0]) << 12 | X(text[i + 1]) << 8 | X(text[i + 2]) << 4 | X(text[i + 3]);
        i += 3;
    } else {
        point = 0;
        for (;;) {
            next = text[++i];
            if (next == '}')
                break;
            point = (point << 4) | X(next);
        }
    }

    U(local, point);
    return point;
}

#define CYLexBufferPoint(point) do { \
    std::back_insert_iterator<std::vector<char> > inserter(yyextra->buffer_); \
    U(inserter, point); \
} while (false)

#define CYLexBufferUnit(value) do { \
    yyextra->buffer_.push_back(value); \
} while (false)

#define CYLexBufferUnits(data, size) do { \
    yyextra->buffer_.insert(yyextra->buffer_.end(), data, data + size); \
} while (false)

#define CYLexBufferStart(condition) do { \
    yyextra->buffer_.clear(); \
    yy_push_state(condition, yyscanner); \
} while (false)

#define CYLexBufferEnd(type, Type, value, highlight) do { \
    yy_pop_state(yyscanner); \
    I(type, Type(P.strmemdup(yyextra->buffer_.data(), yyextra->buffer_.size()), yyextra->buffer_.size()), value, highlight); \
} while (false)

#define YY_INPUT(data, value, size) do { \
    value = yyextra->data_.sgetn(data, size) ?: YY_NULL; \
} while (false)

%}

%option prefix="cy"
%option bison-bridge
%option bison-locations
%option nodefault
%option noyywrap
%option noyylineno
%option nounput
%option nounistd
%option 8bit
%option backup
%option batch
%option never-interactive
%option pointer
%option reentrant
%option stack

U1 [\x00-\x7f]
U0 [\x80-\xbf]
U2 [\xc2-\xdf]
U3 [\xe0-\xef]
U4 [\xf0-\xf4]
UN [\xc0-\xc1\xf5-\xff]
UE {U1}|{U2}|{U3}|{U4}|{UN}

HexDigit [0-9a-fA-F]
LineTerminatorSequence \r?\n|\r|\xe2\x80[\xa8\xa9]
WhiteSpace [\x09\x0b\x0c\x20]|\xc2\xa0|\xef\xbb\xbf
UnicodeEscape \\u({HexDigit}{4}|\{{HexDigit}+\})

NotLineTerminator [\xc2-\xdf][\x80-\xbf]|\xe0[\xa0-\xbf][\x80-\xbf]|\xe2\x80[\x80-\xa7\xaa-\xbf]|\xe2[\x81-\xbf][\x80-\xbf]|[\xe1\xe3-\xef][\x80-\xbf]{2}|\xf0[\x90-\xbf][\x80-\xbf]{2}|\xf4[\x80-\x8f][\x80-\xbf]{2}|[\xf1-\xf3][\x80-\xbf]{3}
NoneTerminatorCharacter [^\r\n\x80-\xff]|{NotLineTerminator}
RegExCharacter [^/[\\]{-}[\r\n\x80-\xff]|{NotLineTerminator}
RegClsCharacter [^]\\]{-}[\r\n\x80-\xff]|{NotLineTerminator}
CommentCharacter [^*/]{-}[\r\n\x80-\xff]|{NotLineTerminator}
SingleCharacter [^'\\]{-}[\r\n\x80-\xff]|{NotLineTerminator}
DoubleCharacter [^"\\]{-}[\r\n\x80-\xff]|{NotLineTerminator}
PlateCharacter [^$`\\]{-}[\r\n\x80-\xff]|{NotLineTerminator}

UnicodeIDStart_0 [\x41-\x5a\x61-\x7a]|\xc2[\xaa\xb5\xba]|\xc3[\x80-\x96\x98-\xb6\xb8-\xbf]|\xcb[\x80\x81\x86-\x91\xa0-\xa4\xac\xae]|\xcd[\xb0-\xb4\xb6\xb7\xba-\xbd\xbf]|\xce[\x86\x88-\x8a\x8c\x8e-\xa1\xa3-\xbf]|\xcf[\x80-\xb5\xb7-\xbf]|\xd2[\x80\x81\x8a-\xbf]|\xd4[\x80-\xaf\xb1-\xbf]|\xd5[\x80-\x96\x99\xa1-\xbf]|\xd6[\x80-\x87]|\xd7[\x90-\xaa\xb0-\xb2]|\xd8[\xa0-\xbf]|\xd9[\x80-\x8a\xae\xaf\xb1-\xbf]|\xdb[\x80-\x93\x95\xa5\xa6\xae\xaf\xba-\xbc\xbf]|\xdc[\x90\x92-\xaf]|\xdd[\x8d-\xbf]|\xde[\x80-\xa5\xb1]|\xdf[\x8a-\xaa\xb4\xb5\xba]|[\xc4-\xca\xd0\xd1\xd3\xda][\x80-\xbf]|\xe0\xa0[\x80-\x95\x9a\xa4\xa8]|\xe0\xa1[\x80-\x98]|\xe0\xa2[\xa0-\xb4]|\xe0\xa4[\x84-\xb9\xbd]|\xe0\xa5[\x90\x98-\xa1\xb1-\xbf]|\xe0\xa6[\x80\x85-\x8c\x8f\x90\x93-\xa8\xaa-\xb0\xb2\xb6-\xb9\xbd]|\xe0\xa7[\x8e\x9c\x9d\x9f-\xa1\xb0\xb1]|\xe0\xa8[\x85-\x8a\x8f\x90\x93-\xa8\xaa-\xb0\xb2\xb3\xb5\xb6\xb8\xb9]|\xe0\xa9[\x99-\x9c\x9e\xb2-\xb4]|\xe0\xaa[\x85-\x8d\x8f-\x91\x93-\xa8\xaa-\xb0\xb2\xb3\xb5-\xb9\xbd]|\xe0\xab[\x90\xa0\xa1\xb9]|\xe0\xac[\x85-\x8c\x8f\x90\x93-\xa8\xaa-\xb0\xb2\xb3\xb5-\xb9\xbd]
UnicodeIDStart_1 \xe0\xad[\x9c\x9d\x9f-\xa1\xb1]|\xe0\xae[\x83\x85-\x8a\x8e-\x90\x92-\x95\x99\x9a\x9c\x9e\x9f\xa3\xa4\xa8-\xaa\xae-\xb9]|\xe0\xaf[\x90]|\xe0\xb0[\x85-\x8c\x8e-\x90\x92-\xa8\xaa-\xb9\xbd]|\xe0\xb1[\x98-\x9a\xa0\xa1]|\xe0\xb2[\x85-\x8c\x8e-\x90\x92-\xa8\xaa-\xb3\xb5-\xb9\xbd]|\xe0\xb3[\x9e\xa0\xa1\xb1\xb2]|\xe0\xb4[\x85-\x8c\x8e-\x90\x92-\xba\xbd]|\xe0\xb5[\x8e\x9f-\xa1\xba-\xbf]|\xe0\xb6[\x85-\x96\x9a-\xb1\xb3-\xbb\xbd]|\xe0\xb7[\x80-\x86]|\xe0\xb8[\x81-\xb0\xb2\xb3]|\xe0\xb9[\x80-\x86]|\xe0\xba[\x81\x82\x84\x87\x88\x8a\x8d\x94-\x97\x99-\x9f\xa1-\xa3\xa5\xa7\xaa\xab\xad-\xb0\xb2\xb3\xbd]|\xe0\xbb[\x80-\x84\x86\x9c-\x9f]|\xe0\xbc[\x80]|\xe0\xbd[\x80-\x87\x89-\xac]|\xe0\xbe[\x88-\x8c]|\xe1\x80[\x80-\xaa\xbf]|\xe1\x81[\x90-\x95\x9a-\x9d\xa1\xa5\xa6\xae-\xb0\xb5-\xbf]|\xe1\x82[\x80\x81\x8e\xa0-\xbf]|\xe1\x83[\x80-\x85\x87\x8d\x90-\xba\xbc-\xbf]|\xe1\x89[\x80-\x88\x8a-\x8d\x90-\x96\x98\x9a-\x9d\xa0-\xbf]|\xe1\x8a[\x80-\x88\x8a-\x8d\x90-\xb0\xb2-\xb5\xb8-\xbe]|\xe1\x8b[\x80\x82-\x85\x88-\x96\x98-\xbf]
UnicodeIDStart_2 \xe1\x8c[\x80-\x90\x92-\x95\x98-\xbf]|\xe1\x8d[\x80-\x9a]|\xe1\x8e[\x80-\x8f\xa0-\xbf]|\xe1\x8f[\x80-\xb5\xb8-\xbd]|\xe1\x90[\x81-\xbf]|\xe1\x99[\x80-\xac\xaf-\xbf]|\xe1\x9a[\x81-\x9a\xa0-\xbf]|\xe1\x9b[\x80-\xaa\xae-\xb8]|\xe1\x9c[\x80-\x8c\x8e-\x91\xa0-\xb1]|\xe1\x9d[\x80-\x91\xa0-\xac\xae-\xb0]|\xe1\x9e[\x80-\xb3]|\xe1\x9f[\x97\x9c]|\xe1\xa0[\xa0-\xbf]|\xe1\xa1[\x80-\xb7]|\xe1\xa2[\x80-\xa8\xaa\xb0-\xbf]|\xe1\xa3[\x80-\xb5]|\xe1\xa4[\x80-\x9e]|\xe1\xa5[\x90-\xad\xb0-\xb4]|\xe1\xa6[\x80-\xab\xb0-\xbf]|\xe1\xa7[\x80-\x89]|\xe1\xa8[\x80-\x96\xa0-\xbf]|\xe1\xa9[\x80-\x94]|\xe1\xaa[\xa7]|\xe1\xac[\x85-\xb3]|\xe1\xad[\x85-\x8b]|\xe1\xae[\x83-\xa0\xae\xaf\xba-\xbf]|\xe1\xaf[\x80-\xa5]|\xe1\xb0[\x80-\xa3]|\xe1\xb1[\x8d-\x8f\x9a-\xbd]|\xe1\xb3[\xa9-\xac\xae-\xb1\xb5\xb6]|\xe1\xbc[\x80-\x95\x98-\x9d\xa0-\xbf]|\xe1\xbd[\x80-\x85\x88-\x8d\x90-\x97\x99\x9b\x9d\x9f-\xbd]|\xe1\xbe[\x80-\xb4\xb6-\xbc\xbe]|\xe1\xbf[\x82-\x84\x86-\x8c\x90-\x93\x96-\x9b\xa0-\xac\xb2-\xb4\xb6-\xbc]|\xe1[\x84-\x88\x91-\x98\xb4-\xb6\xb8-\xbb][\x80-\xbf]
UnicodeIDStart_3 \xe2\x81[\xb1\xbf]|\xe2\x82[\x90-\x9c]|\xe2\x84[\x82\x87\x8a-\x93\x95\x98-\x9d\xa4\xa6\xa8\xaa-\xb9\xbc-\xbf]|\xe2\x85[\x85-\x89\x8e\xa0-\xbf]|\xe2\x86[\x80-\x88]|\xe2\xb0[\x80-\xae\xb0-\xbf]|\xe2\xb1[\x80-\x9e\xa0-\xbf]|\xe2\xb3[\x80-\xa4\xab-\xae\xb2\xb3]|\xe2\xb4[\x80-\xa5\xa7\xad\xb0-\xbf]|\xe2\xb5[\x80-\xa7\xaf]|\xe2\xb6[\x80-\x96\xa0-\xa6\xa8-\xae\xb0-\xb6\xb8-\xbe]|\xe2\xb7[\x80-\x86\x88-\x8e\x90-\x96\x98-\x9e]|\xe2[\xb2][\x80-\xbf]|\xe3\x80[\x85-\x87\xa1-\xa9\xb1-\xb5\xb8-\xbc]|\xe3\x81[\x81-\xbf]|\xe3\x82[\x80-\x96\x9b-\x9f\xa1-\xbf]|\xe3\x83[\x80-\xba\xbc-\xbf]|\xe3\x84[\x85-\xad\xb1-\xbf]|\xe3\x86[\x80-\x8e\xa0-\xba]|\xe3\x87[\xb0-\xbf]|\xe3[\x85\x90-\xbf][\x80-\xbf]|\xe4\xb6[\x80-\xb5]|\xe4[\x80-\xb5\xb8-\xbf][\x80-\xbf]|\xe9\xbf[\x80-\x95]|\xe9[\x80-\xbe][\x80-\xbf]|\xea\x92[\x80-\x8c]|\xea\x93[\x90-\xbd]|\xea\x98[\x80-\x8c\x90-\x9f\xaa\xab]|\xea\x99[\x80-\xae\xbf]|\xea\x9a[\x80-\x9d\xa0-\xbf]|\xea\x9b[\x80-\xaf]|\xea\x9c[\x97-\x9f\xa2-\xbf]|\xea\x9e[\x80-\x88\x8b-\xad\xb0-\xb7]
UnicodeIDStart_4 \xea\x9f[\xb7-\xbf]|\xea\xa0[\x80\x81\x83-\x85\x87-\x8a\x8c-\xa2]|\xea\xa1[\x80-\xb3]|\xea\xa2[\x82-\xb3]|\xea\xa3[\xb2-\xb7\xbb\xbd]|\xea\xa4[\x8a-\xa5\xb0-\xbf]|\xea\xa5[\x80-\x86\xa0-\xbc]|\xea\xa6[\x84-\xb2]|\xea\xa7[\x8f\xa0-\xa4\xa6-\xaf\xba-\xbe]|\xea\xa8[\x80-\xa8]|\xea\xa9[\x80-\x82\x84-\x8b\xa0-\xb6\xba\xbe\xbf]|\xea\xaa[\x80-\xaf\xb1\xb5\xb6\xb9-\xbd]|\xea\xab[\x80\x82\x9b-\x9d\xa0-\xaa\xb2-\xb4]|\xea\xac[\x81-\x86\x89-\x8e\x91-\x96\xa0-\xa6\xa8-\xae\xb0-\xbf]|\xea\xad[\x80-\x9a\x9c-\xa5\xb0-\xbf]|\xea\xaf[\x80-\xa2]|\xea[\x80-\x91\x94-\x97\x9d\xae\xb0-\xbf][\x80-\xbf]|\xed\x9e[\x80-\xa3\xb0-\xbf]|\xed\x9f[\x80-\x86\x8b-\xbb]|\xed[\x80-\x9d][\x80-\xbf]|\xef\xa9[\x80-\xad\xb0-\xbf]|\xef\xab[\x80-\x99]|\xef\xac[\x80-\x86\x93-\x97\x9d\x9f-\xa8\xaa-\xb6\xb8-\xbc\xbe]|\xef\xad[\x80\x81\x83\x84\x86-\xbf]|\xef\xae[\x80-\xb1]|\xef\xaf[\x93-\xbf]|\xef\xb4[\x80-\xbd]|\xef\xb5[\x90-\xbf]|\xef\xb6[\x80-\x8f\x92-\xbf]|\xef\xb7[\x80-\x87\xb0-\xbb]|\xef\xb9[\xb0-\xb4\xb6-\xbf]|\xef\xbb[\x80-\xbc]
UnicodeIDStart_5 \xef\xbc[\xa1-\xba]|\xef\xbd[\x81-\x9a\xa6-\xbf]|\xef\xbe[\x80-\xbe]|\xef\xbf[\x82-\x87\x8a-\x8f\x92-\x97\x9a-\x9c]|\xef[\xa4-\xa8\xaa\xb0-\xb3\xba][\x80-\xbf]|[\xe5-\xe8\xeb\xec][\x80-\xbf]{2}|\xf0\x90\x80[\x80-\x8b\x8d-\xa6\xa8-\xba\xbc\xbd\xbf]|\xf0\x90\x81[\x80-\x8d\x90-\x9d]|\xf0\x90\x83[\x80-\xba]|\xf0\x90\x85[\x80-\xb4]|\xf0\x90\x8a[\x80-\x9c\xa0-\xbf]|\xf0\x90\x8b[\x80-\x90]|\xf0\x90\x8c[\x80-\x9f\xb0-\xbf]|\xf0\x90\x8d[\x80-\x8a\x90-\xb5]|\xf0\x90\x8e[\x80-\x9d\xa0-\xbf]|\xf0\x90\x8f[\x80-\x83\x88-\x8f\x91-\x95]|\xf0\x90\x92[\x80-\x9d]|\xf0\x90\x94[\x80-\xa7\xb0-\xbf]|\xf0\x90\x95[\x80-\xa3]|\xf0\x90\x9c[\x80-\xb6]|\xf0\x90\x9d[\x80-\x95\xa0-\xa7]|\xf0\x90\xa0[\x80-\x85\x88\x8a-\xb5\xb7\xb8\xbc\xbf]|\xf0\x90\xa1[\x80-\x95\xa0-\xb6]|\xf0\x90\xa2[\x80-\x9e]|\xf0\x90\xa3[\xa0-\xb2\xb4\xb5]|\xf0\x90\xa4[\x80-\x95\xa0-\xb9]|\xf0\x90\xa6[\x80-\xb7\xbe\xbf]|\xf0\x90\xa8[\x80\x90-\x93\x95-\x97\x99-\xb3]|\xf0\x90\xa9[\xa0-\xbc]|\xf0\x90\xaa[\x80-\x9c]|\xf0\x90\xab[\x80-\x87\x89-\xa4]|\xf0\x90\xac[\x80-\xb5]
UnicodeIDStart_6 \xf0\x90\xad[\x80-\x95\xa0-\xb2]|\xf0\x90\xae[\x80-\x91]|\xf0\x90\xb1[\x80-\x88]|\xf0\x90\xb2[\x80-\xb2]|\xf0\x90\xb3[\x80-\xb2]|\xf0\x90[\x82\x90\x91\x98-\x9b\xb0][\x80-\xbf]|\xf0\x91\x80[\x83-\xb7]|\xf0\x91\x82[\x83-\xaf]|\xf0\x91\x83[\x90-\xa8]|\xf0\x91\x84[\x83-\xa6]|\xf0\x91\x85[\x90-\xb2\xb6]|\xf0\x91\x86[\x83-\xb2]|\xf0\x91\x87[\x81-\x84\x9a\x9c]|\xf0\x91\x88[\x80-\x91\x93-\xab]|\xf0\x91\x8a[\x80-\x86\x88\x8a-\x8d\x8f-\x9d\x9f-\xa8\xb0-\xbf]|\xf0\x91\x8b[\x80-\x9e]|\xf0\x91\x8c[\x85-\x8c\x8f\x90\x93-\xa8\xaa-\xb0\xb2\xb3\xb5-\xb9\xbd]|\xf0\x91\x8d[\x90\x9d-\xa1]|\xf0\x91\x92[\x80-\xaf]|\xf0\x91\x93[\x84\x85\x87]|\xf0\x91\x96[\x80-\xae]|\xf0\x91\x97[\x98-\x9b]|\xf0\x91\x98[\x80-\xaf]|\xf0\x91\x99[\x84]|\xf0\x91\x9a[\x80-\xaa]|\xf0\x91\x9c[\x80-\x99]|\xf0\x91\xa2[\xa0-\xbf]|\xf0\x91\xa3[\x80-\x9f\xbf]|\xf0\x91\xab[\x80-\xb8]|\xf0\x92\x8e[\x80-\x99]|\xf0\x92\x91[\x80-\xae]|\xf0\x92\x95[\x80-\x83]|\xf0\x92[\x80-\x8d\x90\x92-\x94][\x80-\xbf]|\xf0\x93\x90[\x80-\xae]|\xf0\x93[\x80-\x8f][\x80-\xbf]
UnicodeIDStart_7 \xf0\x94\x99[\x80-\x86]|\xf0\x94[\x90-\x98][\x80-\xbf]|\xf0\x96\xa8[\x80-\xb8]|\xf0\x96\xa9[\x80-\x9e]|\xf0\x96\xab[\x90-\xad]|\xf0\x96\xac[\x80-\xaf]|\xf0\x96\xad[\x80-\x83\xa3-\xb7\xbd-\xbf]|\xf0\x96\xae[\x80-\x8f]|\xf0\x96\xbd[\x80-\x84\x90]|\xf0\x96\xbe[\x93-\x9f]|\xf0\x96[\xa0-\xa7\xbc][\x80-\xbf]|\xf0\x9b\x80[\x80\x81]|\xf0\x9b\xb1[\x80-\xaa\xb0-\xbc]|\xf0\x9b\xb2[\x80-\x88\x90-\x99]|\xf0\x9b[\xb0][\x80-\xbf]|\xf0\x9d\x91[\x80-\x94\x96-\xbf]|\xf0\x9d\x92[\x80-\x9c\x9e\x9f\xa2\xa5\xa6\xa9-\xac\xae-\xb9\xbb\xbd-\xbf]|\xf0\x9d\x93[\x80-\x83\x85-\xbf]|\xf0\x9d\x94[\x80-\x85\x87-\x8a\x8d-\x94\x96-\x9c\x9e-\xb9\xbb-\xbe]|\xf0\x9d\x95[\x80-\x84\x86\x8a-\x90\x92-\xbf]|\xf0\x9d\x9a[\x80-\xa5\xa8-\xbf]|\xf0\x9d\x9b[\x80\x82-\x9a\x9c-\xba\xbc-\xbf]|\xf0\x9d\x9c[\x80-\x94\x96-\xb4\xb6-\xbf]|\xf0\x9d\x9d[\x80-\x8e\x90-\xae\xb0-\xbf]|\xf0\x9d\x9e[\x80-\x88\x8a-\xa8\xaa-\xbf]|\xf0\x9d\x9f[\x80-\x82\x84-\x8b]|\xf0\x9d[\x90\x96-\x99][\x80-\xbf]|\xf0\x9e\xa3[\x80-\x84]|\xf0\x9e\xb8[\x80-\x83\x85-\x9f\xa1\xa2\xa4\xa7\xa9-\xb2\xb4-\xb7\xb9\xbb]
UnicodeIDStart {UnicodeIDStart_0}|{UnicodeIDStart_1}|{UnicodeIDStart_2}|{UnicodeIDStart_3}|{UnicodeIDStart_4}|{UnicodeIDStart_5}|{UnicodeIDStart_6}|{UnicodeIDStart_7}|\xf0\x9e\xb9[\x82\x87\x89\x8b\x8d-\x8f\x91\x92\x94\x97\x99\x9b\x9d\x9f\xa1\xa2\xa4\xa7-\xaa\xac-\xb2\xb4-\xb7\xb9-\xbc\xbe]|\xf0\x9e\xba[\x80-\x89\x8b-\x9b\xa1-\xa3\xa5-\xa9\xab-\xbb]|\xf0\x9e[\xa0-\xa2][\x80-\xbf]|\xf0\xaa\x9b[\x80-\x96]|\xf0\xaa[\x80-\x9a\x9c-\xbf][\x80-\xbf]|\xf0\xab\x9c[\x80-\xb4]|\xf0\xab\xa0[\x80-\x9d\xa0-\xbf]|\xf0\xab[\x80-\x9b\x9d-\x9f\xa1-\xbf][\x80-\xbf]|\xf0\xac\xba[\x80-\xa1]|\xf0\xac[\x80-\xb9][\x80-\xbf]|\xf0\xaf\xa8[\x80-\x9d]|\xf0\xaf[\xa0-\xa7][\x80-\xbf]|\xf0[\xa0-\xa9][\x80-\xbf]{2}
UnicodeIDContinue_0 [\x30-\x39\x41-\x5a\x5f\x61-\x7a]|\xc2[\xaa\xb5\xb7\xba]|\xc3[\x80-\x96\x98-\xb6\xb8-\xbf]|\xcb[\x80\x81\x86-\x91\xa0-\xa4\xac\xae]|\xcd[\x80-\xb4\xb6\xb7\xba-\xbd\xbf]|\xce[\x86-\x8a\x8c\x8e-\xa1\xa3-\xbf]|\xcf[\x80-\xb5\xb7-\xbf]|\xd2[\x80\x81\x83-\x87\x8a-\xbf]|\xd4[\x80-\xaf\xb1-\xbf]|\xd5[\x80-\x96\x99\xa1-\xbf]|\xd6[\x80-\x87\x91-\xbd\xbf]|\xd7[\x81\x82\x84\x85\x87\x90-\xaa\xb0-\xb2]|\xd8[\x90-\x9a\xa0-\xbf]|\xd9[\x80-\xa9\xae-\xbf]|\xdb[\x80-\x93\x95-\x9c\x9f-\xa8\xaa-\xbc\xbf]|\xdc[\x90-\xbf]|\xdd[\x80-\x8a\x8d-\xbf]|\xde[\x80-\xb1]|\xdf[\x80-\xb5\xba]|[\xc4-\xca\xcc\xd0\xd1\xd3\xda][\x80-\xbf]|\xe0\xa0[\x80-\xad]|\xe0\xa1[\x80-\x9b]|\xe0\xa2[\xa0-\xb4]|\xe0\xa3[\xa3-\xbf]|\xe0\xa5[\x80-\xa3\xa6-\xaf\xb1-\xbf]|\xe0\xa6[\x80-\x83\x85-\x8c\x8f\x90\x93-\xa8\xaa-\xb0\xb2\xb6-\xb9\xbc-\xbf]|\xe0\xa7[\x80-\x84\x87\x88\x8b-\x8e\x97\x9c\x9d\x9f-\xa3\xa6-\xb1]|\xe0\xa8[\x81-\x83\x85-\x8a\x8f\x90\x93-\xa8\xaa-\xb0\xb2\xb3\xb5\xb6\xb8\xb9\xbc\xbe\xbf]|\xe0\xa9[\x80-\x82\x87\x88\x8b-\x8d\x91\x99-\x9c\x9e\xa6-\xb5]
UnicodeIDContinue_1 \xe0\xaa[\x81-\x83\x85-\x8d\x8f-\x91\x93-\xa8\xaa-\xb0\xb2\xb3\xb5-\xb9\xbc-\xbf]|\xe0\xab[\x80-\x85\x87-\x89\x8b-\x8d\x90\xa0-\xa3\xa6-\xaf\xb9]|\xe0\xac[\x81-\x83\x85-\x8c\x8f\x90\x93-\xa8\xaa-\xb0\xb2\xb3\xb5-\xb9\xbc-\xbf]|\xe0\xad[\x80-\x84\x87\x88\x8b-\x8d\x96\x97\x9c\x9d\x9f-\xa3\xa6-\xaf\xb1]|\xe0\xae[\x82\x83\x85-\x8a\x8e-\x90\x92-\x95\x99\x9a\x9c\x9e\x9f\xa3\xa4\xa8-\xaa\xae-\xb9\xbe\xbf]|\xe0\xaf[\x80-\x82\x86-\x88\x8a-\x8d\x90\x97\xa6-\xaf]|\xe0\xb0[\x80-\x83\x85-\x8c\x8e-\x90\x92-\xa8\xaa-\xb9\xbd-\xbf]|\xe0\xb1[\x80-\x84\x86-\x88\x8a-\x8d\x95\x96\x98-\x9a\xa0-\xa3\xa6-\xaf]|\xe0\xb2[\x81-\x83\x85-\x8c\x8e-\x90\x92-\xa8\xaa-\xb3\xb5-\xb9\xbc-\xbf]|\xe0\xb3[\x80-\x84\x86-\x88\x8a-\x8d\x95\x96\x9e\xa0-\xa3\xa6-\xaf\xb1\xb2]|\xe0\xb4[\x81-\x83\x85-\x8c\x8e-\x90\x92-\xba\xbd-\xbf]|\xe0\xb5[\x80-\x84\x86-\x88\x8a-\x8e\x97\x9f-\xa3\xa6-\xaf\xba-\xbf]|\xe0\xb6[\x82\x83\x85-\x96\x9a-\xb1\xb3-\xbb\xbd]|\xe0\xb7[\x80-\x86\x8a\x8f-\x94\x96\x98-\x9f\xa6-\xaf\xb2\xb3]|\xe0\xb8[\x81-\xba]
UnicodeIDContinue_2 \xe0\xb9[\x80-\x8e\x90-\x99]|\xe0\xba[\x81\x82\x84\x87\x88\x8a\x8d\x94-\x97\x99-\x9f\xa1-\xa3\xa5\xa7\xaa\xab\xad-\xb9\xbb-\xbd]|\xe0\xbb[\x80-\x84\x86\x88-\x8d\x90-\x99\x9c-\x9f]|\xe0\xbc[\x80\x98\x99\xa0-\xa9\xb5\xb7\xb9\xbe\xbf]|\xe0\xbd[\x80-\x87\x89-\xac\xb1-\xbf]|\xe0\xbe[\x80-\x84\x86-\x97\x99-\xbc]|\xe0\xbf[\x86]|\xe0[\xa4][\x80-\xbf]|\xe1\x81[\x80-\x89\x90-\xbf]|\xe1\x82[\x80-\x9d\xa0-\xbf]|\xe1\x83[\x80-\x85\x87\x8d\x90-\xba\xbc-\xbf]|\xe1\x89[\x80-\x88\x8a-\x8d\x90-\x96\x98\x9a-\x9d\xa0-\xbf]|\xe1\x8a[\x80-\x88\x8a-\x8d\x90-\xb0\xb2-\xb5\xb8-\xbe]|\xe1\x8b[\x80\x82-\x85\x88-\x96\x98-\xbf]|\xe1\x8c[\x80-\x90\x92-\x95\x98-\xbf]|\xe1\x8d[\x80-\x9a\x9d-\x9f\xa9-\xb1]|\xe1\x8e[\x80-\x8f\xa0-\xbf]|\xe1\x8f[\x80-\xb5\xb8-\xbd]|\xe1\x90[\x81-\xbf]|\xe1\x99[\x80-\xac\xaf-\xbf]|\xe1\x9a[\x81-\x9a\xa0-\xbf]|\xe1\x9b[\x80-\xaa\xae-\xb8]|\xe1\x9c[\x80-\x8c\x8e-\x94\xa0-\xb4]|\xe1\x9d[\x80-\x93\xa0-\xac\xae-\xb0\xb2\xb3]|\xe1\x9f[\x80-\x93\x97\x9c\x9d\xa0-\xa9]|\xe1\xa0[\x8b-\x8d\x90-\x99\xa0-\xbf]
UnicodeIDContinue_3 \xe1\xa1[\x80-\xb7]|\xe1\xa2[\x80-\xaa\xb0-\xbf]|\xe1\xa3[\x80-\xb5]|\xe1\xa4[\x80-\x9e\xa0-\xab\xb0-\xbb]|\xe1\xa5[\x86-\xad\xb0-\xb4]|\xe1\xa6[\x80-\xab\xb0-\xbf]|\xe1\xa7[\x80-\x89\x90-\x9a]|\xe1\xa8[\x80-\x9b\xa0-\xbf]|\xe1\xa9[\x80-\x9e\xa0-\xbc\xbf]|\xe1\xaa[\x80-\x89\x90-\x99\xa7\xb0-\xbd]|\xe1\xad[\x80-\x8b\x90-\x99\xab-\xb3]|\xe1\xaf[\x80-\xb3]|\xe1\xb0[\x80-\xb7]|\xe1\xb1[\x80-\x89\x8d-\xbd]|\xe1\xb3[\x90-\x92\x94-\xb6\xb8\xb9]|\xe1\xb7[\x80-\xb5\xbc-\xbf]|\xe1\xbc[\x80-\x95\x98-\x9d\xa0-\xbf]|\xe1\xbd[\x80-\x85\x88-\x8d\x90-\x97\x99\x9b\x9d\x9f-\xbd]|\xe1\xbe[\x80-\xb4\xb6-\xbc\xbe]|\xe1\xbf[\x82-\x84\x86-\x8c\x90-\x93\x96-\x9b\xa0-\xac\xb2-\xb4\xb6-\xbc]|\xe1[\x80\x84-\x88\x91-\x98\x9e\xac\xae\xb4-\xb6\xb8-\xbb][\x80-\xbf]|\xe2\x80[\xbf]|\xe2\x81[\x80\x94\xb1\xbf]|\xe2\x82[\x90-\x9c]|\xe2\x83[\x90-\x9c\xa1\xa5-\xb0]|\xe2\x84[\x82\x87\x8a-\x93\x95\x98-\x9d\xa4\xa6\xa8\xaa-\xb9\xbc-\xbf]|\xe2\x85[\x85-\x89\x8e\xa0-\xbf]|\xe2\x86[\x80-\x88]|\xe2\xb0[\x80-\xae\xb0-\xbf]|\xe2\xb1[\x80-\x9e\xa0-\xbf]
UnicodeIDContinue_4 \xe2\xb3[\x80-\xa4\xab-\xb3]|\xe2\xb4[\x80-\xa5\xa7\xad\xb0-\xbf]|\xe2\xb5[\x80-\xa7\xaf\xbf]|\xe2\xb6[\x80-\x96\xa0-\xa6\xa8-\xae\xb0-\xb6\xb8-\xbe]|\xe2\xb7[\x80-\x86\x88-\x8e\x90-\x96\x98-\x9e\xa0-\xbf]|\xe2[\xb2][\x80-\xbf]|\xe3\x80[\x85-\x87\xa1-\xaf\xb1-\xb5\xb8-\xbc]|\xe3\x81[\x81-\xbf]|\xe3\x82[\x80-\x96\x99-\x9f\xa1-\xbf]|\xe3\x83[\x80-\xba\xbc-\xbf]|\xe3\x84[\x85-\xad\xb1-\xbf]|\xe3\x86[\x80-\x8e\xa0-\xba]|\xe3\x87[\xb0-\xbf]|\xe3[\x85\x90-\xbf][\x80-\xbf]|\xe4\xb6[\x80-\xb5]|\xe4[\x80-\xb5\xb8-\xbf][\x80-\xbf]|\xe9\xbf[\x80-\x95]|\xe9[\x80-\xbe][\x80-\xbf]|\xea\x92[\x80-\x8c]|\xea\x93[\x90-\xbd]|\xea\x98[\x80-\x8c\x90-\xab]|\xea\x99[\x80-\xaf\xb4-\xbd\xbf]|\xea\x9b[\x80-\xb1]|\xea\x9c[\x97-\x9f\xa2-\xbf]|\xea\x9e[\x80-\x88\x8b-\xad\xb0-\xb7]|\xea\x9f[\xb7-\xbf]|\xea\xa0[\x80-\xa7]|\xea\xa1[\x80-\xb3]|\xea\xa3[\x80-\x84\x90-\x99\xa0-\xb7\xbb\xbd]|\xea\xa4[\x80-\xad\xb0-\xbf]|\xea\xa5[\x80-\x93\xa0-\xbc]|\xea\xa7[\x80\x8f-\x99\xa0-\xbe]|\xea\xa8[\x80-\xb6]|\xea\xa9[\x80-\x8d\x90-\x99\xa0-\xb6\xba-\xbf]
UnicodeIDContinue_5 \xea\xab[\x80-\x82\x9b-\x9d\xa0-\xaf\xb2-\xb6]|\xea\xac[\x81-\x86\x89-\x8e\x91-\x96\xa0-\xa6\xa8-\xae\xb0-\xbf]|\xea\xad[\x80-\x9a\x9c-\xa5\xb0-\xbf]|\xea\xaf[\x80-\xaa\xac\xad\xb0-\xb9]|\xea[\x80-\x91\x94-\x97\x9a\x9d\xa2\xa6\xaa\xae\xb0-\xbf][\x80-\xbf]|\xed\x9e[\x80-\xa3\xb0-\xbf]|\xed\x9f[\x80-\x86\x8b-\xbb]|\xed[\x80-\x9d][\x80-\xbf]|\xef\xa9[\x80-\xad\xb0-\xbf]|\xef\xab[\x80-\x99]|\xef\xac[\x80-\x86\x93-\x97\x9d-\xa8\xaa-\xb6\xb8-\xbc\xbe]|\xef\xad[\x80\x81\x83\x84\x86-\xbf]|\xef\xae[\x80-\xb1]|\xef\xaf[\x93-\xbf]|\xef\xb4[\x80-\xbd]|\xef\xb5[\x90-\xbf]|\xef\xb6[\x80-\x8f\x92-\xbf]|\xef\xb7[\x80-\x87\xb0-\xbb]|\xef\xb8[\x80-\x8f\xa0-\xaf\xb3\xb4]|\xef\xb9[\x8d-\x8f\xb0-\xb4\xb6-\xbf]|\xef\xbb[\x80-\xbc]|\xef\xbc[\x90-\x99\xa1-\xba\xbf]|\xef\xbd[\x81-\x9a\xa6-\xbf]|\xef\xbe[\x80-\xbe]|\xef\xbf[\x82-\x87\x8a-\x8f\x92-\x97\x9a-\x9c]|\xef[\xa4-\xa8\xaa\xb0-\xb3\xba][\x80-\xbf]|[\xe5-\xe8\xeb\xec][\x80-\xbf]{2}|\xf0\x90\x80[\x80-\x8b\x8d-\xa6\xa8-\xba\xbc\xbd\xbf]|\xf0\x90\x81[\x80-\x8d\x90-\x9d]
UnicodeIDContinue_6 \xf0\x90\x83[\x80-\xba]|\xf0\x90\x85[\x80-\xb4]|\xf0\x90\x87[\xbd]|\xf0\x90\x8a[\x80-\x9c\xa0-\xbf]|\xf0\x90\x8b[\x80-\x90\xa0]|\xf0\x90\x8c[\x80-\x9f\xb0-\xbf]|\xf0\x90\x8d[\x80-\x8a\x90-\xba]|\xf0\x90\x8e[\x80-\x9d\xa0-\xbf]|\xf0\x90\x8f[\x80-\x83\x88-\x8f\x91-\x95]|\xf0\x90\x92[\x80-\x9d\xa0-\xa9]|\xf0\x90\x94[\x80-\xa7\xb0-\xbf]|\xf0\x90\x95[\x80-\xa3]|\xf0\x90\x9c[\x80-\xb6]|\xf0\x90\x9d[\x80-\x95\xa0-\xa7]|\xf0\x90\xa0[\x80-\x85\x88\x8a-\xb5\xb7\xb8\xbc\xbf]|\xf0\x90\xa1[\x80-\x95\xa0-\xb6]|\xf0\x90\xa2[\x80-\x9e]|\xf0\x90\xa3[\xa0-\xb2\xb4\xb5]|\xf0\x90\xa4[\x80-\x95\xa0-\xb9]|\xf0\x90\xa6[\x80-\xb7\xbe\xbf]|\xf0\x90\xa8[\x80-\x83\x85\x86\x8c-\x93\x95-\x97\x99-\xb3\xb8-\xba\xbf]|\xf0\x90\xa9[\xa0-\xbc]|\xf0\x90\xaa[\x80-\x9c]|\xf0\x90\xab[\x80-\x87\x89-\xa6]|\xf0\x90\xac[\x80-\xb5]|\xf0\x90\xad[\x80-\x95\xa0-\xb2]|\xf0\x90\xae[\x80-\x91]|\xf0\x90\xb1[\x80-\x88]|\xf0\x90\xb2[\x80-\xb2]|\xf0\x90\xb3[\x80-\xb2]|\xf0\x90[\x82\x90\x91\x98-\x9b\xb0][\x80-\xbf]|\xf0\x91\x81[\x80-\x86\xa6-\xaf\xbf]
UnicodeIDContinue_7 \xf0\x91\x82[\x80-\xba]|\xf0\x91\x83[\x90-\xa8\xb0-\xb9]|\xf0\x91\x84[\x80-\xb4\xb6-\xbf]|\xf0\x91\x85[\x90-\xb3\xb6]|\xf0\x91\x87[\x80-\x84\x8a-\x8c\x90-\x9a\x9c]|\xf0\x91\x88[\x80-\x91\x93-\xb7]|\xf0\x91\x8a[\x80-\x86\x88\x8a-\x8d\x8f-\x9d\x9f-\xa8\xb0-\xbf]|\xf0\x91\x8b[\x80-\xaa\xb0-\xb9]|\xf0\x91\x8c[\x80-\x83\x85-\x8c\x8f\x90\x93-\xa8\xaa-\xb0\xb2\xb3\xb5-\xb9\xbc-\xbf]|\xf0\x91\x8d[\x80-\x84\x87\x88\x8b-\x8d\x90\x97\x9d-\xa3\xa6-\xac\xb0-\xb4]|\xf0\x91\x93[\x80-\x85\x87\x90-\x99]|\xf0\x91\x96[\x80-\xb5\xb8-\xbf]|\xf0\x91\x97[\x80\x98-\x9d]|\xf0\x91\x99[\x80\x84\x90-\x99]|\xf0\x91\x9a[\x80-\xb7]|\xf0\x91\x9b[\x80-\x89]|\xf0\x91\x9c[\x80-\x99\x9d-\xab\xb0-\xb9]|\xf0\x91\xa2[\xa0-\xbf]|\xf0\x91\xa3[\x80-\xa9\xbf]|\xf0\x91\xab[\x80-\xb8]|\xf0\x91[\x80\x86\x92\x98][\x80-\xbf]|\xf0\x92\x8e[\x80-\x99]|\xf0\x92\x91[\x80-\xae]|\xf0\x92\x95[\x80-\x83]|\xf0\x92[\x80-\x8d\x90\x92-\x94][\x80-\xbf]|\xf0\x93\x90[\x80-\xae]|\xf0\x93[\x80-\x8f][\x80-\xbf]|\xf0\x94\x99[\x80-\x86]|\xf0\x94[\x90-\x98][\x80-\xbf]
UnicodeIDContinue_8 \xf0\x96\xa8[\x80-\xb8]|\xf0\x96\xa9[\x80-\x9e\xa0-\xa9]|\xf0\x96\xab[\x90-\xad\xb0-\xb4]|\xf0\x96\xac[\x80-\xb6]|\xf0\x96\xad[\x80-\x83\x90-\x99\xa3-\xb7\xbd-\xbf]|\xf0\x96\xae[\x80-\x8f]|\xf0\x96\xbd[\x80-\x84\x90-\xbe]|\xf0\x96\xbe[\x8f-\x9f]|\xf0\x96[\xa0-\xa7\xbc][\x80-\xbf]|\xf0\x9b\x80[\x80\x81]|\xf0\x9b\xb1[\x80-\xaa\xb0-\xbc]|\xf0\x9b\xb2[\x80-\x88\x90-\x99\x9d\x9e]|\xf0\x9b[\xb0][\x80-\xbf]|\xf0\x9d\x85[\xa5-\xa9\xad-\xb2\xbb-\xbf]|\xf0\x9d\x86[\x80-\x82\x85-\x8b\xaa-\xad]|\xf0\x9d\x89[\x82-\x84]|\xf0\x9d\x91[\x80-\x94\x96-\xbf]|\xf0\x9d\x92[\x80-\x9c\x9e\x9f\xa2\xa5\xa6\xa9-\xac\xae-\xb9\xbb\xbd-\xbf]|\xf0\x9d\x93[\x80-\x83\x85-\xbf]|\xf0\x9d\x94[\x80-\x85\x87-\x8a\x8d-\x94\x96-\x9c\x9e-\xb9\xbb-\xbe]|\xf0\x9d\x95[\x80-\x84\x86\x8a-\x90\x92-\xbf]|\xf0\x9d\x9a[\x80-\xa5\xa8-\xbf]|\xf0\x9d\x9b[\x80\x82-\x9a\x9c-\xba\xbc-\xbf]|\xf0\x9d\x9c[\x80-\x94\x96-\xb4\xb6-\xbf]|\xf0\x9d\x9d[\x80-\x8e\x90-\xae\xb0-\xbf]|\xf0\x9d\x9e[\x80-\x88\x8a-\xa8\xaa-\xbf]|\xf0\x9d\x9f[\x80-\x82\x84-\x8b\x8e-\xbf]
UnicodeIDContinue {UnicodeIDContinue_0}|{UnicodeIDContinue_1}|{UnicodeIDContinue_2}|{UnicodeIDContinue_3}|{UnicodeIDContinue_4}|{UnicodeIDContinue_5}|{UnicodeIDContinue_6}|{UnicodeIDContinue_7}|{UnicodeIDContinue_8}|\xf0\x9d\xa8[\x80-\xb6\xbb-\xbf]|\xf0\x9d\xa9[\x80-\xac\xb5]|\xf0\x9d\xaa[\x84\x9b-\x9f\xa1-\xaf]|\xf0\x9d[\x90\x96-\x99][\x80-\xbf]|\xf0\x9e\xa3[\x80-\x84\x90-\x96]|\xf0\x9e\xb8[\x80-\x83\x85-\x9f\xa1\xa2\xa4\xa7\xa9-\xb2\xb4-\xb7\xb9\xbb]|\xf0\x9e\xb9[\x82\x87\x89\x8b\x8d-\x8f\x91\x92\x94\x97\x99\x9b\x9d\x9f\xa1\xa2\xa4\xa7-\xaa\xac-\xb2\xb4-\xb7\xb9-\xbc\xbe]|\xf0\x9e\xba[\x80-\x89\x8b-\x9b\xa1-\xa3\xa5-\xa9\xab-\xbb]|\xf0\x9e[\xa0-\xa2][\x80-\xbf]|\xf0\xaa\x9b[\x80-\x96]|\xf0\xaa[\x80-\x9a\x9c-\xbf][\x80-\xbf]|\xf0\xab\x9c[\x80-\xb4]|\xf0\xab\xa0[\x80-\x9d\xa0-\xbf]|\xf0\xab[\x80-\x9b\x9d-\x9f\xa1-\xbf][\x80-\xbf]|\xf0\xac\xba[\x80-\xa1]|\xf0\xac[\x80-\xb9][\x80-\xbf]|\xf0\xaf\xa8[\x80-\x9d]|\xf0\xaf[\xa0-\xa7][\x80-\xbf]|\xf0[\xa0-\xa9][\x80-\xbf]{2}|\xf3\xa0\x87[\x80-\xaf]|\xf3\xa0[\x84-\x86][\x80-\xbf]
IdentifierMore [$_]

UnicodeStart {IdentifierMore}|{UnicodeIDStart}
UnicodePart {IdentifierMore}|\xe2\x80[\x8c\x8d]|{UnicodeIDContinue}
UnicodeScrap {U2}|{U3}{U0}{0,1}|{U4}{U0}{0,2}|{UN}|{U0}
UnicodeError ({U2}|{U3}{U0}{0,1}|{U4}{U0}{0,2}){UE}|{UN}|{U0}

IdentifierStart {UnicodeStart}|{UnicodeEscape}
IdentifierPart {UnicodePart}|{UnicodeEscape}
IdentifierFail {UnicodeError}|\\(u({HexDigit}{0,3}|\{{HexDigit}*))?
IdentifierScrap {IdentifierPart}*{IdentifierFail}?

RegularExpressionBackslashSequence \\{NoneTerminatorCharacter}
RegularExpressionClassChars ({RegClsCharacter}|{RegularExpressionBackslashSequence})*


%x RegularExpression
%x MultiLine

%x LegacySingleString
%x LegacyDoubleString

%x StrictSingleString
%x StrictDoubleString
%x StrictAccentString

%s Div
%s DivOrTemplateTail


%%

    /* RegEx {{{ */
<RegularExpression>{
    \/{UnicodePart}* R CYLexBufferUnits(yytext, yyleng); CYLexBufferEnd(literal, RegEx, tk::RegularExpressionLiteral_, hi::Constant);
    \/{UnicodePart}*{UnicodeError} R E("invalid character");

    {RegExCharacter}+ R CYLexBufferUnits(yytext, yyleng);

    {RegularExpressionBackslashSequence} R CYLexBufferUnits(yytext, yyleng);
    \\ R E("invalid escape")

    (\\|{RegExCharacter}+)?{LineTerminatorSequence} R E("invalid newline");
    (\\|{RegExCharacter}+)?{UnicodeScrap} R E("invalid character");

    "["{RegularExpressionClassChars}"]" R CYLexBufferUnits(yytext, yyleng);
    "["{RegularExpressionClassChars}\\? R E("invalid class");

    "["{RegularExpressionClassChars}\\?{LineTerminatorSequence} R E("invalid newline");
    "["{RegularExpressionClassChars}\\?{UnicodeScrap} R E("invalid character");

    <<EOF>> R E("unterminated regex")
}
    /* }}} */
    /* Comment {{{ */
    /* XXX: maybe fold LineTerminatorSequence into these definitions */
#!{NoneTerminatorCharacter}* L M
\/\/{NoneTerminatorCharacter}* L M
(#!|\/\/){NoneTerminatorCharacter}*{UnicodeError} L E("invalid character");

\/\* L yy_push_state(MultiLine, yyscanner);

<MultiLine>{
    \**\*\/ R yy_pop_state(yyscanner); M N
    \**{LineTerminatorSequence} yylloc->end.Lines(); yyextra->last_ = true;
    \**{CommentCharacter}|\/ R

    \**{UnicodeScrap} R E("invalid character");
    \**\* R E("invalid comment");

    <<EOF>> R E("invalid comment")
}
    /* }}} */
    /* Element {{{ */
    /* }}} */
    /* Operator {{{ */
"..."  L F(tk::PeriodPeriodPeriod, hi::Meta);
".."   L E("invalid operator")

"&"    L F(tk::Ampersand, hi::Operator);
"&&"   L F(tk::AmpersandAmpersand, hi::Operator);
"&="   L F(tk::AmpersandEqual, hi::Operator);
"^"    L F(tk::Carrot, hi::Operator);
"^="   L F(tk::CarrotEqual, hi::Operator);
"="    L F(tk::Equal, hi::Operator);
"=="   L F(tk::EqualEqual, hi::Operator);
"==="  L F(tk::EqualEqualEqual, hi::Operator);
"=>"   L F(tk::EqualRight, hi::Operator);
"!"    L F(tk::Exclamation, hi::Operator);
"!="   L F(tk::ExclamationEqual, hi::Operator);
"!=="  L F(tk::ExclamationEqualEqual, hi::Operator);
"-"    L F(tk::Hyphen, hi::Operator);
"-="   L F(tk::HyphenEqual, hi::Operator);
"--"   L F(tk::HyphenHyphen, hi::Operator);
"->"   L F(tk::HyphenRight, hi::Operator);
"<"    L F(tk::Left, hi::Operator);
"<="   L F(tk::LeftEqual, hi::Operator);
"<<"   L F(tk::LeftLeft, hi::Operator);
"<<="  L F(tk::LeftLeftEqual, hi::Operator);
"%"    L F(tk::Percent, hi::Operator);
"%="   L F(tk::PercentEqual, hi::Operator);
"."    L F(tk::Period, hi::Operator);
"?."   L F(tk::QuestionPeriod, hi::Operator);
"|"    L F(tk::Pipe, hi::Operator);
"|="   L F(tk::PipeEqual, hi::Operator);
"||"   L F(tk::PipePipe, hi::Operator);
"+"    L F(tk::Plus, hi::Operator);
"+="   L F(tk::PlusEqual, hi::Operator);
"++"   L F(tk::PlusPlus, hi::Operator);
">"    L F(tk::Right, hi::Operator);
">="   L F(tk::RightEqual, hi::Operator);
">>"   L F(tk::RightRight, hi::Operator);
">>="  L F(tk::RightRightEqual, hi::Operator);
">>>"  L F(tk::RightRightRight, hi::Operator);
">>>=" L F(tk::RightRightRightEqual, hi::Operator);
"*"    L F(tk::Star, hi::Operator);
"*="   L F(tk::StarEqual, hi::Operator);
"~"    L F(tk::Tilde, hi::Operator);

"/"  L F(tk::Slash, hi::Operator);
"/=" L F(tk::SlashEqual, hi::Operator);

":"    L F(tk::Colon, hi::Structure);
"::"   L F(tk::ColonColon, hi::Structure);
","    L F(tk::Comma, hi::Structure);
"?"    L F(tk::Question, hi::Structure);
";"    L F(tk::SemiColon, hi::Structure);
"#"    L F(tk::Pound, hi::Operator);

"("    L F(tk::OpenParen, hi::Structure);
")"    L F(tk::CloseParen, hi::Structure);

"{"    L yyextra->template_.push(false); F(tk::OpenBrace, hi::Structure);
<Div>"}" L S(template_); F(tk::CloseBrace, hi::Structure);

"["    L F(tk::OpenBracket, hi::Structure);
"]"    L F(tk::CloseBracket, hi::Structure);
    /* }}} */
    /* Keyword {{{ */
"@error"          L F(tk::At_error_, hi::Error);

"@class"          L F(tk::At_class_, hi::Meta);

"@encode"         L F(tk::At_encode_, hi::Meta);

"@end"            L F(tk::At_end_, hi::Meta);
"@false"          L F(tk::At_false_, hi::Constant);
"@implementation" L F(tk::At_implementation_, hi::Meta);
"@import"         L F(tk::At_import_, hi::Special);
"@NO"             L F(tk::At_NO_, hi::Constant);
"@null"           L F(tk::At_null_, hi::Constant);
"@selector"       L F(tk::At_selector_, hi::Meta);
"@true"           L F(tk::At_true_, hi::Constant);
"@YES"            L F(tk::At_YES_, hi::Constant);

@({UnicodeStart}{UnicodePart}*{UnicodeError}?|{UnicodeError}) L E("invalid keyword")
    /* }}} */
    /* Highlight {{{ */
"undefined"       L F(tk::_undefined_, hi::Operator);

"bool"            L F(tk::_bool_, hi::Type);
"BOOL"            L F(tk::_BOOL_, hi::Type);
"id"              L F(tk::_id_, hi::Type);
"nil"             L F(tk::_nil_, hi::Constant);
"NULL"            L F(tk::_NULL_, hi::Constant);
"SEL"             L F(tk::_SEL_, hi::Type);
    /* }}} */
    /* Reserved {{{ */
"abstract"        L /*FII*/ F(tk::_abstract_, hi::Meta);
"as"              L /*III*/ F(tk::_as_, hi::Meta);
"await"           L /*II?*/ F(tk::_await_, hi::Meta);
"boolean"         L /*FII*/ F(tk::_boolean_, hi::Type);
"break"           L /*KKK*/ F(tk::_break_, hi::Control);
"byte"            L /*FII*/ F(tk::_byte_, hi::Type);
"case"            L /*KKK*/ F(tk::_case_, hi::Control);
"catch"           L /*KKK*/ F(tk::_catch_, hi::Control);
"char"            L /*FII*/ F(tk::_char_, hi::Type);
"class"           L /*FFK*/ F(tk::_class_, hi::Meta);
"const"           L /*FFK*/ F(tk::_const_, hi::Meta);
"constructor"     L /*III*/ F(tk::_constructor_, hi::Special);
"continue"        L /*KKK*/ F(tk::_continue_, hi::Control);
"debugger"        L /*FKK*/ F(tk::_debugger_, hi::Meta);
"default"         L /*KKK*/ F(tk::_default_, hi::Control);
"delete"          L /*KKK*/ F(tk::_delete_, hi::Operator);
"do"              L /*KKK*/ F(tk::_do_, hi::Control);
"double"          L /*FII*/ F(tk::_double_, hi::Type);
"else"            L /*KKK*/ F(tk::_else_, hi::Control);
"enum"            L /*FFF*/ F(tk::_enum_, hi::Meta);
"export"          L /*FFK*/ F(tk::_export_, hi::Meta);
"extends"         L /*FFK*/ F(tk::_extends_, hi::Meta);
"eval"            L /*III*/ F(tk::_eval_, hi::Special);
"false"           L /*LLL*/ F(tk::_false_, hi::Constant);
"final"           L /*FII*/ F(tk::_final_, hi::Meta);
"finally"         L /*KKK*/ F(tk::_finally_, hi::Control);
"float"           L /*FII*/ F(tk::_float_, hi::Type);
"for"             L /*KKK*/ F(tk::_for_, hi::Control);
"from"            L /*III*/ F(tk::_from_, hi::Meta);
"function"        L /*KKK*/ F(tk::_function_, hi::Meta);
"goto"            L /*FII*/ F(tk::_goto_, hi::Control);
"get"             L /*III*/ F(tk::_get_, hi::Meta);
"if"              L /*KKK*/ F(tk::_if_, hi::Control);
"implements"      L /*FSS*/ F(tk::_implements_, hi::Meta);
"import"          L /*FFK*/ F(tk::_import_, hi::Meta);
"in"              L /*KKK*/ F(tk::_in_, hi::Operator);
"Infinity"        L /*III*/ F(tk::_Infinity_, hi::Constant);
"instanceof"      L /*KKK*/ F(tk::_instanceof_, hi::Operator);
"int"             L /*FII*/ F(tk::_int_, hi::Type);
"__int128"        L /*III*/ F(tk::___int128_, hi::Type);
"interface"       L /*FSS*/ F(tk::_interface_, hi::Meta);
"let"             L /*IS?*/ F(tk::_let_, hi::Meta);
"long"            L /*FII*/ F(tk::_long_, hi::Type);
"native"          L /*FII*/ F(tk::_native_, hi::Meta);
"new"             L /*KKK*/ F(tk::_new_, hi::Operator);
"null"            L /*LLL*/ F(tk::_null_, hi::Constant);
"package"         L /*FSS*/ F(tk::_package_, hi::Meta);
"private"         L /*FSS*/ F(tk::_private_, hi::Meta);
"protected"       L /*FSS*/ F(tk::_protected_, hi::Meta);
"__proto__"       L /*III*/ F(tk::___proto___, hi::Special);
"prototype"       L /*III*/ F(tk::_prototype_, hi::Special);
"public"          L /*FSS*/ F(tk::_public_, hi::Meta);
"return"          L /*KKK*/ F(tk::_return_, hi::Control);
"set"             L /*III*/ F(tk::_set_, hi::Meta);
"short"           L /*FII*/ F(tk::_short_, hi::Type);
"static"          L /*FS?*/ F(tk::_static_, hi::Meta);
"super"           L /*FFK*/ F(tk::_super_, hi::Constant);
"switch"          L /*KKK*/ F(tk::_switch_, hi::Control);
"synchronized"    L /*FII*/ F(tk::_synchronized_, hi::Meta);
"target"          L /*III*/ F(tk::_target_, hi::Identifier);
"this"            L /*KKK*/ F(tk::_this_, hi::Constant);
"throw"           L /*KKK*/ F(tk::_throw_, hi::Control);
"throws"          L /*FII*/ F(tk::_throws_, hi::Meta);
"transient"       L /*FII*/ F(tk::_transient_, hi::Meta);
"true"            L /*LLL*/ F(tk::_true_, hi::Constant);
"try"             L /*KKK*/ F(tk::_try_, hi::Control);
"typeid"          L /*III*/ F(tk::_typeid_, hi::Operator);
"typeof"          L /*KKK*/ F(tk::_typeof_, hi::Operator);
"var"             L /*KKK*/ F(tk::_var_, hi::Meta);
"void"            L /*KKK*/ F(tk::_void_, hi::Operator);
"volatile"        L /*FII*/ F(tk::_volatile_, hi::Meta);
"while"           L /*KKK*/ F(tk::_while_, hi::Control);
"with"            L /*KKK*/ F(tk::_with_, hi::Control);
"yield"           L /*IS?*/ F(tk::_yield_, hi::Control);

"each"            L F(tk::_each_, hi::Control);
"of"              L F(tk::_of_, hi::Operator);

"extern"          L F(tk::_extern_, hi::Type);
"signed"          L F(tk::_signed_, hi::Type);
"struct"          L F(tk::_struct_, hi::Meta);
"typedef"         L F(tk::_typedef_, hi::Meta);
"unsigned"        L F(tk::_unsigned_, hi::Type);

"NO"              L F(tk::_NO_, hi::Constant);
"YES"             L F(tk::_YES_, hi::Constant);

    /* }}} */
    /* Identifier {{{ */
{UnicodeStart}{UnicodePart}* L I(identifier, Identifier(Y), tk::Identifier_, hi::Identifier);

{IdentifierStart}{IdentifierPart}* L {
    char *value(A char[yyleng + 1]);
    char *local(value);

    for (yy_size_t i(0), e(yyleng); i != e; ++i) {
        char next(yytext[i]);
        if (next != '\\')
            *local++ = next;
        else {
            bool (*is)(unsigned) = (i == 0 ? &IsIdentifierStart : &IsIdentifierContinue);
            unsigned point(U(local, yytext, ++i));
            if (!is(point))
                E("invalid character");
        }
    }

    *local = '\0';
    I(identifier, Identifier(value), tk::Identifier_, hi::Identifier);
}

({IdentifierStart}{IdentifierPart}*)?{IdentifierFail} L E("invalid identifier")
    /* }}} */
    /* Number {{{ */
0[0-7]+ L I(number, Number(strtoull(yytext + 1, NULL, 8)), tk::NumericLiteral, hi::Constant);
0[0-9]+ L I(number, Number(strtoull(yytext + 1, NULL, 10)), tk::NumericLiteral, hi::Constant);

0[xX][0-9a-fA-F]+ L I(number, Number(strtoull(yytext + 2, NULL, 16)), tk::NumericLiteral, hi::Constant);
0[oO][0-7]+ L I(number, Number(strtoull(yytext + 2, NULL, 8)), tk::NumericLiteral, hi::Constant);
0[bB][0-1]+ L I(number, Number(strtoull(yytext + 2, NULL, 2)), tk::NumericLiteral, hi::Constant);

(\.[0-9]+|(0|[1-9][0-9]*)(\.[0-9]*)?)([eE][+-]?[0-9]+)? L I(number, Number(strtod(yytext, NULL)), tk::NumericLiteral, hi::Constant);
(\.[0-9]+|(0|[1-9][0-9]*)(\.[0-9]*)?)[eE][+-]?{IdentifierScrap} L E("invalid exponent")
(\.?[0-9]|(0|[1-9][0-9]*)\.){IdentifierScrap} L E("invalid number")
    /* }}} */
    /* String {{{ */
\' L CYLexBufferStart(LegacySingleString);
<LegacySingleString,StrictSingleString>{
    \' R CYLexBufferEnd(string, String, tk::StringLiteral, hi::Constant);
    {SingleCharacter}+ R CYLexBufferUnits(yytext, yyleng);
    {SingleCharacter}*{LineTerminatorSequence} R E("invalid newline");
    {SingleCharacter}*{UnicodeScrap} R E("invalid character");
}

\" L CYLexBufferStart(LegacyDoubleString);
<LegacyDoubleString,StrictDoubleString>{
    \" R CYLexBufferEnd(string, String, tk::StringLiteral, hi::Constant);
    {DoubleCharacter}+ R CYLexBufferUnits(yytext, yyleng);
    {DoubleCharacter}*{LineTerminatorSequence} R E("invalid newline");
    {DoubleCharacter}*{UnicodeScrap} R E("invalid character");
}
    /* }}} */
    /* Template {{{ */
"`" L yyextra->tail_ = false; CYLexBufferStart(StrictAccentString);
<DivOrTemplateTail>"}" L yyextra->tail_ = true; S(template_); CYLexBufferStart(StrictAccentString);

<StrictAccentString>{
    "`" R CYLexBufferEnd(string, String, yyextra->tail_ ? tk::TemplateTail : tk::NoSubstitutionTemplate, hi::Constant);
    "${" R yyextra->template_.push(true); CYLexBufferEnd(string, String, yyextra->tail_ ? tk::TemplateMiddle : tk::TemplateHead, hi::Constant);

    "$" R CYLexBufferUnit('$');

    {PlateCharacter}+ R CYLexBufferUnits(yytext, yyleng);
    {PlateCharacter}*{UnicodeScrap} R E("invalid character");

    {PlateCharacter}*{LineTerminatorSequence} yylloc->end.Lines(); CYLexBufferUnits(yytext, yyleng);
    \\{LineTerminatorSequence} yylloc->end.Lines();
}
    /* }}} */
    /* Escapes {{{ */
<LegacySingleString,LegacyDoubleString>{
    \\[0-3][0-7][0-7] R CYLexBufferPoint(X(yytext[1]) << 6 | X(yytext[2]) << 3 | X(yytext[3]));
    \\[0-7][0-7] R CYLexBufferUnit(X(yytext[1]) << 3 | X(yytext[2]));
    \\[0-7] R CYLexBufferUnit(X(yytext[1]));
}

<StrictSingleString,StrictDoubleString,StrictAccentString>{
    \\0[0-7] R E("legacy escape");
    \\0 R CYLexBufferUnit('\0');
}

<LegacySingleString,LegacyDoubleString,StrictSingleString,StrictDoubleString,StrictAccentString>{
    \\b R CYLexBufferUnit('\b');
    \\f R CYLexBufferUnit('\f');
    \\n R CYLexBufferUnit('\n');
    \\r R CYLexBufferUnit('\r');
    \\t R CYLexBufferUnit('\t');
    \\v R CYLexBufferUnit('\v');

    \\x{HexDigit}{2} R CYLexBufferPoint(X(yytext[2]) << 4 | X(yytext[3]));

    \\u{HexDigit}{4} R CYLexBufferPoint(X(yytext[2]) << 12 | X(yytext[3]) << 8 | X(yytext[4]) << 4 | X(yytext[5]));

    \\u\{{HexDigit}+\} R {
        unsigned point(0);
        for (yy_size_t i(3); i != yyleng - 1; ++i)
            point = point << 4 | X(yytext[i]);
        CYLexBufferPoint(point);
    }

    \\{LineTerminatorSequence} yylloc->end.Lines();
    \\{NoneTerminatorCharacter} R CYLexBufferUnits(yytext + 1, yyleng - 1);
    \\{UnicodeScrap} R E("invalid character");

    \\(x{HexDigit}{0,1}|u({HexDigit}{0,3}|\{{HexDigit}*))? R E("invalid escape");
    <<EOF>> R E("invalid string");
}
    /* }}} */

{LineTerminatorSequence} yylloc->step(); yylloc->end.Lines(); yyextra->last_ = true; N
{WhiteSpace} L
{U1}|{UnicodeScrap} L E("invalid character");

<<EOF>> if (yyextra->auto_) { yyextra->auto_ = false; F(tk::AutoComplete, hi::Nothing); } L yyterminate();

%%

#undef yyextra
#define yyextra this
#define yyscanner scanner_

void CYDriver::ScannerInit() {
    cylex_init(&scanner_);
    cyset_extra(this, scanner_);
}

void CYDriver::ScannerDestroy() {
    cylex_destroy(scanner_);
}

void CYDriver::SetRegEx(bool equal) {
    CYLexBufferStart(RegularExpression);
    CYLexBufferUnit('/');
    if (equal)
        CYLexBufferUnit('=');
}

void CYDriver::SetCondition(Condition condition) {
    struct yyguts_t *yyg(reinterpret_cast<struct yyguts_t *>(scanner_));

    switch (condition) {
        default:
            _assert(false);
    }
}

void CYDriver::PushCondition(Condition condition) {
    switch (condition) {
        default:
            _assert(false);
    }
}

void CYDriver::PopCondition() {
    yy_pop_state(scanner_);
}

bool CYLexerHighlight(hi::Value &highlight, CYLocation &location, void *scanner) {
    YYSTYPE value;
    if (cylex(&value, &location, scanner) == 0)
        return false;
    highlight = value.highlight_;
    return true;
}

#pragma clang diagnostic pop
